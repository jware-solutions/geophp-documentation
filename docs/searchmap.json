[{"id":"content/_overview/overview.md","title":"GeoPHP","slug":"geophp","url":"/geophp-documentation/#geophp","section":"Overview","category":"","content":"GeoPHP is a library of geospatial functions based on GeoRust and Turf.js. It was born due to the lack of a modern geospatial library for PHP. The tools available today are not published in the Composer repositories and are not easy to use (some requires DB drivers or constructs the Geometries from complex Strings). GeoPHP offers:\n\n🚀 Modern and fast: made in PHP 7 with fast algorithms\n\n🥳 Friendly and simple interface: implemented with the Object Oriented Paradigm, allows its easy and fast use by the developer.\n\n👨🏼‍💻 Easy access: the library is published in Composer for quick import into your projects.\n\n🛠 Tested: all methods are covered by unit tests.\n\n🌟 A lot of examples!\n\nSee all the geometries available!\n","updated":"2020-01-21T22:38:28.580Z","roles":[],"scope":[]},{"id":"content/_getting-started/getting-started.md","title":"Getting Started","slug":"getting-started","url":"/geophp-documentation/getting-started/#getting-started","section":"Getting Started","category":"","content":"Pre-requisites\n\nGeoPHP was tested on PHP >= 7. Please, let PHP 5 die!\n\nInstallation\n\nInstall the library running:\n\ncomposer require jware/geophp\n\nUsage\n\n\n\nPlease read the documentation to see the full method list available.\n","updated":"2020-01-21T22:38:28.583Z","roles":[],"scope":[]},{"id":"content/_geometries/00_Introduction.md","title":"Introduction","slug":"introduction","url":"/geophp-documentation/geometries/#introduction","section":"Geometries","category":"","content":"GeoPHP offers some structures to work with geospatial data called Geometries . More will be added as needed by the community. At the moment they are available:\n\nPoint\n\nLine\n\nPolygon\n","updated":"2020-01-21T22:38:28.586Z","roles":[],"scope":[]},{"id":"content/_geometries/01_Point.md","title":"Point","slug":"point","url":"/geophp-documentation/geometries/#point","section":"Geometries","category":"","content":"Represents a single point in 2D space.\n\nMethods\n\nnew(float $x, float $y): Point\n\nCreates a new Point.\n\n\n\nclone(): Point\n\nCreates a Point's clone.\n\n\n\ngetX(): float\n\nX coordinate getter.\n\n\n\nsetX(float $x): Point\n\nX coordinate setter. Returns the instance for chainable behaviour.\n\n\n\ngetY(): float\n\nY coordinate getter.\n\n\n\nsetY(float $y): Point\n\nY coordinate setter. Returns the instance for chainable behaviour.\n\n\n\ngetXandY(): array\n\nX and Y coordinates getter.\n\n\n\nisEqual(Point $otherPoint): bool\n\nChecks if two point have the same coordinates.\n\n\n\ngetMagnitude(): float\n\nComputes the magnitude of the point's vector.\n\n\n\nfromRadiansToDegrees(): Point\n\nConverts x and y components of the Point from radians to degrees. Returns a Point with the new components.\n\n\n\nfromDegreesToRadians(): Point\n\nConverts x and y components of the Point from degrees to radians. Returns a Point with the new components.\n\n\n\ngetAngle(Point $otherPoint, bool $inDegrees = true): float\n\nComputes the angle between two points. If $inDegrees is true the result is returned in degrees, in radians otherwise.\n\n\n\ndotProduct(Point $otherPoint): float\n\nComputes the dot product of the two points: dot = x1  x2 + y1  y2.\n\n\n\ncrossProduct(Point $point2, Point $point3): float\n\nComputes the cross product of the three points. A positive value implies $this → #point2 → $point3 is counter-clockwise, negative implies clockwise.\n\n\n\neuclideanDistance(Point $otherPoint): float\n\nComputes the euclidean distance between two points.\n\n\n\nintersectsLine(Line $line): bool\n\nChecks whether the point intersects a line.\n\n\n\nintersectsPoint(Point $otherPoint): bool\n\nChecks whether the point intersects with another point. Two points intersect if they have the same X and Y coordinates (same as isEqual method).\n\n\n\nintersectsPolygon(Polygon $polygon): bool\n\nChecks whether the point intersects with a polygon.\n\n\n","updated":"2020-01-21T22:38:28.615Z","roles":[],"scope":[]},{"id":"content/_geometries/02_Line.md","title":"Line","slug":"line","url":"/geophp-documentation/geometries/#line","section":"Geometries","category":"","content":"A line segment made up of exactly two Points.\n\nMethods\n\nnew(Point $start, Point $end): Line\n\nCreates a new Line.\n\n\n\nclone(): Line\n\nCreates a Line's clone\n\n\n\ngetStart(): Point\n\nStarting point's getter of the line.\n\n\n\nsetStart(Point $start): Line\n\nStarting point's setter. Returns the instance for chainable behaviour.\n\n\n\ngetEnd(): Point\n\nEnding point's getter of the line.\n\n\n\nsetEnd(Point $end): Line\n\nEnding point's setter. Returns the instance for chainable behaviour.\n\n\n\ndeterminant(): float\n\nComputes the determinant of the line.\nDeterminant = line.start.x  line.end.y - line.start.y  line.end.x\n\n\n\ndx(): float\n\nComputes the difference in 'x' components (Δx): line.end.x - line.start.x.\n\n\n\ndy(): float\n\nComputes the difference in 'y' components (Δy): line.end.y - line.start.y.\n\n\n\nslope(): float\n\nComputes the slope of a line: line.dy() / line.dx()\n\n\n\ngetPoints(): array\n\nGetter for starting and ending points.\n\n\n\nintersectsPoint(Point $point): bool\n\nChecks whether the line intersects a point.\n\n\n\nintersectsLine(Line $line): bool\n\nChecks whether the line intersects another line.\n\n\n\nintersectsPolygon(Polygon $polygon): bool\n\nChecks whether the line intersects a polygon.\n\n\n\neuclideanDistance(Point $otherPoint): float\n\nComputes the euclidean distance between two points.\n\n\n\nintersectsLine(Line $line): bool\n\nChecks whether the point intersects a line.\n\n\n\nintersectsPoint(Point $otherPoint): bool\n\nChecks whether the point intersects with another point. Two points intersect if they have the same X and Y coordinates (same as isEqual method).\n\n\n\nintersectsPolygon(Polygon $polygon): bool\n\nChecks whether the point intersects with a polygon.\n\n\n","updated":"2020-01-21T22:38:28.629Z","roles":[],"scope":[]},{"id":"content/_geometries/03_Polygon.md","title":"Polygon","slug":"polygon","url":"/geophp-documentation/geometries/#polygon","section":"Geometries","category":"","content":"A bounded two-dimensional area.\n\nMethods\n\nnew(array $points): Polygon\n\nCreates a new Polygon. The polygon has to have at least three diferent points, and first and last point must have the same coordinates! Otherwise it will throw \\\\JWare\\\\GeoPHP\\\\Exceptions\\\\NotEnoughPointsException or \\\\JWare\\\\GeoPHP\\\\Exceptions\\\\FirstAndLastPointNotEqualException exceptions respectively.\n\n\n\nclone(): Polygon\n\nCreates a Polygon's clone\n\n\n\ngetPoints(): array\n\nAll the polygon's points' getter.\n\n\n\nsetPoint(int $idx, Point $point): Polygon\n\nSetter for one point of the polygon. $idx is the index in the array (starting from 0) of the polygon to replace and $point Point to put in the specified position. $idx can't be the first nor the last Point of the Polygon, otherwise it will throw an \\\\JWare\\\\GeoPHP\\\\Exceptions\\\\SettingPointException exception.\n\n\n\ngetCentroid(): Point\n\nComputes the polygon's centroid.\n\n\n\narea(): float\n\nGet the Polygon's area. Uses the Shoelace Formula.\n\n\n\nintersectsPoint(Point $point): bool\n\nChecks whether the polygon intersects a point. A Polygon intersects a Point if at least one of its lines intersects the Point.\n\n\n\nintersectsLine(Line $line): bool\n\nChecks whether the polygon intersects a line.\n\n\n\nintersectsPolygon(Polygon $polygon): bool\n\nChecks whether the polygon intersects another polygon.\n\n\n\neuclideanDistance(Point $otherPoint): float\n\nComputes the euclidean distance between two points.\n\n\n\nintersectsLine(Line $line): bool\n\nChecks whether the point intersects a line.\n\n\n\nintersectsPoint(Point $otherPoint): bool\n\nChecks whether the point intersects with another point. Two points intersect if they have the same X and Y coordinates (same as isEqual method).\n\n\n\nintersectsPolygon(Polygon $polygon): bool\n\nChecks whether the point intersects with a polygon.\n\n\n\ncontainsPoint(Point $point): bool\n\nChecks whether a point is inside a polygon.\n\n\n\ncontainsLine(Line $line): bool\n\nChecks whether the polygon contains a line.\n\n\n\ncontainsPolygon(Polygon $polygon): bool\n\nChecks whether the polygon contains another polygon.\n\n\n","updated":"2020-01-21T22:38:28.653Z","roles":[],"scope":[]},{"id":"content/_contributing/contributing.md","title":"Contributing","slug":"contributing","url":"/geophp-documentation/contributing/#contributing","section":"Contributing","category":"","content":"Open Source only success with the help from people around the world. I would appreciate any kind of help with this site or the GeoPHP library.\n\nContributing with this documentation\n\nYou can access to this project's repository at Github. There you will be able to see the contributing section at README, where is specified all you need to run this documentation site in your own machine.\n\nContributing with GeoPHP\n\nThanks for your interest in GeoPHP! We have a list of requeriments and helpers for developin in this project in the CONTRIBUTING.md document in Github.\n\nSee you there!\n","updated":"2020-01-21T22:38:28.655Z","roles":[],"scope":[]}]